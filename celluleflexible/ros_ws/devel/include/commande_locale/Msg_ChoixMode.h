// Generated by gencpp from file commande_locale/Msg_ChoixMode.msg
// DO NOT EDIT!


#ifndef COMMANDE_LOCALE_MESSAGE_MSG_CHOIXMODE_H
#define COMMANDE_LOCALE_MESSAGE_MSG_CHOIXMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commande_locale
{
template <class ContainerAllocator>
struct Msg_ChoixMode_
{
  typedef Msg_ChoixMode_<ContainerAllocator> Type;

  Msg_ChoixMode_()
    : mode(0)  {
    }
  Msg_ChoixMode_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> const> ConstPtr;

}; // struct Msg_ChoixMode_

typedef ::commande_locale::Msg_ChoixMode_<std::allocator<void> > Msg_ChoixMode;

typedef boost::shared_ptr< ::commande_locale::Msg_ChoixMode > Msg_ChoixModePtr;
typedef boost::shared_ptr< ::commande_locale::Msg_ChoixMode const> Msg_ChoixModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commande_locale::Msg_ChoixMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::commande_locale::Msg_ChoixMode_<ContainerAllocator1> & lhs, const ::commande_locale::Msg_ChoixMode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::commande_locale::Msg_ChoixMode_<ContainerAllocator1> & lhs, const ::commande_locale::Msg_ChoixMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace commande_locale

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff63f6ea3c3e9b7504b2cb3ee0a09d92";
  }

  static const char* value(const ::commande_locale::Msg_ChoixMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff63f6ea3c3e9b75ULL;
  static const uint64_t static_value2 = 0x04b2cb3ee0a09d92ULL;
};

template<class ContainerAllocator>
struct DataType< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commande_locale/Msg_ChoixMode";
  }

  static const char* value(const ::commande_locale::Msg_ChoixMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"\n"
;
  }

  static const char* value(const ::commande_locale::Msg_ChoixMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg_ChoixMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commande_locale::Msg_ChoixMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commande_locale::Msg_ChoixMode_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMANDE_LOCALE_MESSAGE_MSG_CHOIXMODE_H
