// Generated by gencpp from file commande_locale/TacheFinieMsg.msg
// DO NOT EDIT!


#ifndef COMMANDE_LOCALE_MESSAGE_TACHEFINIEMSG_H
#define COMMANDE_LOCALE_MESSAGE_TACHEFINIEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commande_locale
{
template <class ContainerAllocator>
struct TacheFinieMsg_
{
  typedef TacheFinieMsg_<ContainerAllocator> Type;

  TacheFinieMsg_()
    : num_poste(0)
    , num_produit(0)
    , duree(0)  {
    }
  TacheFinieMsg_(const ContainerAllocator& _alloc)
    : num_poste(0)
    , num_produit(0)
    , duree(0)  {
  (void)_alloc;
    }



   typedef int32_t _num_poste_type;
  _num_poste_type num_poste;

   typedef int32_t _num_produit_type;
  _num_produit_type num_produit;

   typedef int32_t _duree_type;
  _duree_type duree;





  typedef boost::shared_ptr< ::commande_locale::TacheFinieMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commande_locale::TacheFinieMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TacheFinieMsg_

typedef ::commande_locale::TacheFinieMsg_<std::allocator<void> > TacheFinieMsg;

typedef boost::shared_ptr< ::commande_locale::TacheFinieMsg > TacheFinieMsgPtr;
typedef boost::shared_ptr< ::commande_locale::TacheFinieMsg const> TacheFinieMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commande_locale::TacheFinieMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::commande_locale::TacheFinieMsg_<ContainerAllocator1> & lhs, const ::commande_locale::TacheFinieMsg_<ContainerAllocator2> & rhs)
{
  return lhs.num_poste == rhs.num_poste &&
    lhs.num_produit == rhs.num_produit &&
    lhs.duree == rhs.duree;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::commande_locale::TacheFinieMsg_<ContainerAllocator1> & lhs, const ::commande_locale::TacheFinieMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace commande_locale

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commande_locale::TacheFinieMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::TacheFinieMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::TacheFinieMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cf6cdaae99079fd26f29aa9dd559651";
  }

  static const char* value(const ::commande_locale::TacheFinieMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cf6cdaae99079fdULL;
  static const uint64_t static_value2 = 0x26f29aa9dd559651ULL;
};

template<class ContainerAllocator>
struct DataType< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commande_locale/TacheFinieMsg";
  }

  static const char* value(const ::commande_locale::TacheFinieMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_poste\n"
"int32 num_produit\n"
"int32 duree\n"
;
  }

  static const char* value(const ::commande_locale::TacheFinieMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_poste);
      stream.next(m.num_produit);
      stream.next(m.duree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TacheFinieMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commande_locale::TacheFinieMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commande_locale::TacheFinieMsg_<ContainerAllocator>& v)
  {
    s << indent << "num_poste: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_poste);
    s << indent << "num_produit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_produit);
    s << indent << "duree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duree);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMANDE_LOCALE_MESSAGE_TACHEFINIEMSG_H
