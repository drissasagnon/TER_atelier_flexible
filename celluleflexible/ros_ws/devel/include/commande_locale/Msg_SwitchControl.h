// Generated by gencpp from file commande_locale/Msg_SwitchControl.msg
// DO NOT EDIT!


#ifndef COMMANDE_LOCALE_MESSAGE_MSG_SWITCHCONTROL_H
#define COMMANDE_LOCALE_MESSAGE_MSG_SWITCHCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace commande_locale
{
template <class ContainerAllocator>
struct Msg_SwitchControl_
{
  typedef Msg_SwitchControl_<ContainerAllocator> Type;

  Msg_SwitchControl_()
    : header()
    , LOCK()
    , RD()
    , RG()  {
      LOCK.assign(false);

      RD.assign(false);

      RG.assign(false);
  }
  Msg_SwitchControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LOCK()
    , RD()
    , RG()  {
  (void)_alloc;
      LOCK.assign(false);

      RD.assign(false);

      RG.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<uint8_t, 13>  _LOCK_type;
  _LOCK_type LOCK;

   typedef boost::array<uint8_t, 13>  _RD_type;
  _RD_type RD;

   typedef boost::array<uint8_t, 13>  _RG_type;
  _RG_type RG;





  typedef boost::shared_ptr< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> const> ConstPtr;

}; // struct Msg_SwitchControl_

typedef ::commande_locale::Msg_SwitchControl_<std::allocator<void> > Msg_SwitchControl;

typedef boost::shared_ptr< ::commande_locale::Msg_SwitchControl > Msg_SwitchControlPtr;
typedef boost::shared_ptr< ::commande_locale::Msg_SwitchControl const> Msg_SwitchControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commande_locale::Msg_SwitchControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::commande_locale::Msg_SwitchControl_<ContainerAllocator1> & lhs, const ::commande_locale::Msg_SwitchControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.LOCK == rhs.LOCK &&
    lhs.RD == rhs.RD &&
    lhs.RG == rhs.RG;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::commande_locale::Msg_SwitchControl_<ContainerAllocator1> & lhs, const ::commande_locale::Msg_SwitchControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace commande_locale

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0797883d1e8c7216af064c8c90c37c74";
  }

  static const char* value(const ::commande_locale::Msg_SwitchControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0797883d1e8c7216ULL;
  static const uint64_t static_value2 = 0xaf064c8c90c37c74ULL;
};

template<class ContainerAllocator>
struct DataType< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commande_locale/Msg_SwitchControl";
  }

  static const char* value(const ::commande_locale::Msg_SwitchControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool[13] LOCK\n"
"bool[13] RD\n"
"bool[13] RG\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::commande_locale::Msg_SwitchControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LOCK);
      stream.next(m.RD);
      stream.next(m.RG);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg_SwitchControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commande_locale::Msg_SwitchControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commande_locale::Msg_SwitchControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LOCK[]" << std::endl;
    for (size_t i = 0; i < v.LOCK.size(); ++i)
    {
      s << indent << "  LOCK[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.LOCK[i]);
    }
    s << indent << "RD[]" << std::endl;
    for (size_t i = 0; i < v.RD.size(); ++i)
    {
      s << indent << "  RD[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.RD[i]);
    }
    s << indent << "RG[]" << std::endl;
    for (size_t i = 0; i < v.RG.size(); ++i)
    {
      s << indent << "  RG[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.RG[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMANDE_LOCALE_MESSAGE_MSG_SWITCHCONTROL_H
