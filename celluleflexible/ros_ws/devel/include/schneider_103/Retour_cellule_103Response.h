// Generated by gencpp from file schneider_103/Retour_cellule_103Response.msg
// DO NOT EDIT!


#ifndef SCHNEIDER_103_MESSAGE_RETOUR_CELLULE_103RESPONSE_H
#define SCHNEIDER_103_MESSAGE_RETOUR_CELLULE_103RESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace schneider_103
{
template <class ContainerAllocator>
struct Retour_cellule_103Response_
{
  typedef Retour_cellule_103Response_<ContainerAllocator> Type;

  Retour_cellule_103Response_()
    : ST6(false)
    , ST7(false)
    , ST18(false)
    , ST19(false)
    , R3D(false)
    , R4D(false)
    , R9D(false)
    , R10D(false)
    , R3G(false)
    , R4G(false)
    , R9G(false)
    , R10G(false)
    , D3(false)
    , D4(false)
    , D9(false)
    , D10(false)
    , V3(false)
    , V4(false)
    , V9(false)
    , V10(false)
    , PS7(false)
    , PS18(false)
    , PS19(false)
    , D3D(false)
    , D4D(false)
    , D9D(false)
    , D10D(false)
    , D3G(false)
    , D4G(false)
    , D9G(false)
    , D10G(false)
    , CP3(false)
    , CP8(false)  {
    }
  Retour_cellule_103Response_(const ContainerAllocator& _alloc)
    : ST6(false)
    , ST7(false)
    , ST18(false)
    , ST19(false)
    , R3D(false)
    , R4D(false)
    , R9D(false)
    , R10D(false)
    , R3G(false)
    , R4G(false)
    , R9G(false)
    , R10G(false)
    , D3(false)
    , D4(false)
    , D9(false)
    , D10(false)
    , V3(false)
    , V4(false)
    , V9(false)
    , V10(false)
    , PS7(false)
    , PS18(false)
    , PS19(false)
    , D3D(false)
    , D4D(false)
    , D9D(false)
    , D10D(false)
    , D3G(false)
    , D4G(false)
    , D9G(false)
    , D10G(false)
    , CP3(false)
    , CP8(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ST6_type;
  _ST6_type ST6;

   typedef uint8_t _ST7_type;
  _ST7_type ST7;

   typedef uint8_t _ST18_type;
  _ST18_type ST18;

   typedef uint8_t _ST19_type;
  _ST19_type ST19;

   typedef uint8_t _R3D_type;
  _R3D_type R3D;

   typedef uint8_t _R4D_type;
  _R4D_type R4D;

   typedef uint8_t _R9D_type;
  _R9D_type R9D;

   typedef uint8_t _R10D_type;
  _R10D_type R10D;

   typedef uint8_t _R3G_type;
  _R3G_type R3G;

   typedef uint8_t _R4G_type;
  _R4G_type R4G;

   typedef uint8_t _R9G_type;
  _R9G_type R9G;

   typedef uint8_t _R10G_type;
  _R10G_type R10G;

   typedef uint8_t _D3_type;
  _D3_type D3;

   typedef uint8_t _D4_type;
  _D4_type D4;

   typedef uint8_t _D9_type;
  _D9_type D9;

   typedef uint8_t _D10_type;
  _D10_type D10;

   typedef uint8_t _V3_type;
  _V3_type V3;

   typedef uint8_t _V4_type;
  _V4_type V4;

   typedef uint8_t _V9_type;
  _V9_type V9;

   typedef uint8_t _V10_type;
  _V10_type V10;

   typedef uint8_t _PS7_type;
  _PS7_type PS7;

   typedef uint8_t _PS18_type;
  _PS18_type PS18;

   typedef uint8_t _PS19_type;
  _PS19_type PS19;

   typedef uint8_t _D3D_type;
  _D3D_type D3D;

   typedef uint8_t _D4D_type;
  _D4D_type D4D;

   typedef uint8_t _D9D_type;
  _D9D_type D9D;

   typedef uint8_t _D10D_type;
  _D10D_type D10D;

   typedef uint8_t _D3G_type;
  _D3G_type D3G;

   typedef uint8_t _D4G_type;
  _D4G_type D4G;

   typedef uint8_t _D9G_type;
  _D9G_type D9G;

   typedef uint8_t _D10G_type;
  _D10G_type D10G;

   typedef uint8_t _CP3_type;
  _CP3_type CP3;

   typedef uint8_t _CP8_type;
  _CP8_type CP8;





  typedef boost::shared_ptr< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> const> ConstPtr;

}; // struct Retour_cellule_103Response_

typedef ::schneider_103::Retour_cellule_103Response_<std::allocator<void> > Retour_cellule_103Response;

typedef boost::shared_ptr< ::schneider_103::Retour_cellule_103Response > Retour_cellule_103ResponsePtr;
typedef boost::shared_ptr< ::schneider_103::Retour_cellule_103Response const> Retour_cellule_103ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator1> & lhs, const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator2> & rhs)
{
  return lhs.ST6 == rhs.ST6 &&
    lhs.ST7 == rhs.ST7 &&
    lhs.ST18 == rhs.ST18 &&
    lhs.ST19 == rhs.ST19 &&
    lhs.R3D == rhs.R3D &&
    lhs.R4D == rhs.R4D &&
    lhs.R9D == rhs.R9D &&
    lhs.R10D == rhs.R10D &&
    lhs.R3G == rhs.R3G &&
    lhs.R4G == rhs.R4G &&
    lhs.R9G == rhs.R9G &&
    lhs.R10G == rhs.R10G &&
    lhs.D3 == rhs.D3 &&
    lhs.D4 == rhs.D4 &&
    lhs.D9 == rhs.D9 &&
    lhs.D10 == rhs.D10 &&
    lhs.V3 == rhs.V3 &&
    lhs.V4 == rhs.V4 &&
    lhs.V9 == rhs.V9 &&
    lhs.V10 == rhs.V10 &&
    lhs.PS7 == rhs.PS7 &&
    lhs.PS18 == rhs.PS18 &&
    lhs.PS19 == rhs.PS19 &&
    lhs.D3D == rhs.D3D &&
    lhs.D4D == rhs.D4D &&
    lhs.D9D == rhs.D9D &&
    lhs.D10D == rhs.D10D &&
    lhs.D3G == rhs.D3G &&
    lhs.D4G == rhs.D4G &&
    lhs.D9G == rhs.D9G &&
    lhs.D10G == rhs.D10G &&
    lhs.CP3 == rhs.CP3 &&
    lhs.CP8 == rhs.CP8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator1> & lhs, const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace schneider_103

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d53ccdf0331758f5eea11c34a6186be";
  }

  static const char* value(const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d53ccdf0331758fULL;
  static const uint64_t static_value2 = 0x5eea11c34a6186beULL;
};

template<class ContainerAllocator>
struct DataType< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "schneider_103/Retour_cellule_103Response";
  }

  static const char* value(const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool ST6\n"
"bool ST7\n"
"bool ST18\n"
"bool ST19\n"
"bool R3D\n"
"bool R4D\n"
"bool R9D\n"
"bool R10D\n"
"bool R3G\n"
"bool R4G\n"
"bool R9G\n"
"bool R10G\n"
"bool D3\n"
"bool D4\n"
"bool D9\n"
"bool D10\n"
"bool V3\n"
"bool V4\n"
"bool V9\n"
"bool V10\n"
"bool PS7\n"
"bool PS18\n"
"bool PS19\n"
"bool D3D\n"
"bool D4D\n"
"bool D9D\n"
"bool D10D\n"
"bool D3G\n"
"bool D4G\n"
"bool D9G\n"
"bool D10G\n"
"bool CP3\n"
"bool CP8\n"
"\n"
;
  }

  static const char* value(const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ST6);
      stream.next(m.ST7);
      stream.next(m.ST18);
      stream.next(m.ST19);
      stream.next(m.R3D);
      stream.next(m.R4D);
      stream.next(m.R9D);
      stream.next(m.R10D);
      stream.next(m.R3G);
      stream.next(m.R4G);
      stream.next(m.R9G);
      stream.next(m.R10G);
      stream.next(m.D3);
      stream.next(m.D4);
      stream.next(m.D9);
      stream.next(m.D10);
      stream.next(m.V3);
      stream.next(m.V4);
      stream.next(m.V9);
      stream.next(m.V10);
      stream.next(m.PS7);
      stream.next(m.PS18);
      stream.next(m.PS19);
      stream.next(m.D3D);
      stream.next(m.D4D);
      stream.next(m.D9D);
      stream.next(m.D10D);
      stream.next(m.D3G);
      stream.next(m.D4G);
      stream.next(m.D9G);
      stream.next(m.D10G);
      stream.next(m.CP3);
      stream.next(m.CP8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Retour_cellule_103Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::schneider_103::Retour_cellule_103Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::schneider_103::Retour_cellule_103Response_<ContainerAllocator>& v)
  {
    s << indent << "ST6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ST6);
    s << indent << "ST7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ST7);
    s << indent << "ST18: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ST18);
    s << indent << "ST19: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ST19);
    s << indent << "R3D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R3D);
    s << indent << "R4D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R4D);
    s << indent << "R9D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R9D);
    s << indent << "R10D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R10D);
    s << indent << "R3G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R3G);
    s << indent << "R4G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R4G);
    s << indent << "R9G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R9G);
    s << indent << "R10G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R10G);
    s << indent << "D3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D3);
    s << indent << "D4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D4);
    s << indent << "D9: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D9);
    s << indent << "D10: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D10);
    s << indent << "V3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V3);
    s << indent << "V4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V4);
    s << indent << "V9: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V9);
    s << indent << "V10: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V10);
    s << indent << "PS7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PS7);
    s << indent << "PS18: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PS18);
    s << indent << "PS19: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PS19);
    s << indent << "D3D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D3D);
    s << indent << "D4D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D4D);
    s << indent << "D9D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D9D);
    s << indent << "D10D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D10D);
    s << indent << "D3G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D3G);
    s << indent << "D4G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D4G);
    s << indent << "D9G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D9G);
    s << indent << "D10G: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.D10G);
    s << indent << "CP3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CP3);
    s << indent << "CP8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CP8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHNEIDER_103_MESSAGE_RETOUR_CELLULE_103RESPONSE_H
