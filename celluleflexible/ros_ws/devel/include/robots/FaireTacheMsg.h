// Generated by gencpp from file robots/FaireTacheMsg.msg
// DO NOT EDIT!


#ifndef ROBOTS_MESSAGE_FAIRETACHEMSG_H
#define ROBOTS_MESSAGE_FAIRETACHEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots
{
template <class ContainerAllocator>
struct FaireTacheMsg_
{
  typedef FaireTacheMsg_<ContainerAllocator> Type;

  FaireTacheMsg_()
    : num_robot(0)
    , position(0)
    , duree(0)  {
    }
  FaireTacheMsg_(const ContainerAllocator& _alloc)
    : num_robot(0)
    , position(0)
    , duree(0)  {
  (void)_alloc;
    }



   typedef int32_t _num_robot_type;
  _num_robot_type num_robot;

   typedef int32_t _position_type;
  _position_type position;

   typedef int32_t _duree_type;
  _duree_type duree;





  typedef boost::shared_ptr< ::robots::FaireTacheMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots::FaireTacheMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FaireTacheMsg_

typedef ::robots::FaireTacheMsg_<std::allocator<void> > FaireTacheMsg;

typedef boost::shared_ptr< ::robots::FaireTacheMsg > FaireTacheMsgPtr;
typedef boost::shared_ptr< ::robots::FaireTacheMsg const> FaireTacheMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots::FaireTacheMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots::FaireTacheMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots::FaireTacheMsg_<ContainerAllocator1> & lhs, const ::robots::FaireTacheMsg_<ContainerAllocator2> & rhs)
{
  return lhs.num_robot == rhs.num_robot &&
    lhs.position == rhs.position &&
    lhs.duree == rhs.duree;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots::FaireTacheMsg_<ContainerAllocator1> & lhs, const ::robots::FaireTacheMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots::FaireTacheMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots::FaireTacheMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots::FaireTacheMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots::FaireTacheMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots::FaireTacheMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots::FaireTacheMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots::FaireTacheMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d9a6fbf544e79eb45c59d3957770241";
  }

  static const char* value(const ::robots::FaireTacheMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d9a6fbf544e79ebULL;
  static const uint64_t static_value2 = 0x45c59d3957770241ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots::FaireTacheMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots/FaireTacheMsg";
  }

  static const char* value(const ::robots::FaireTacheMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots::FaireTacheMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_robot\n"
"int32 position\n"
"int32 duree\n"
;
  }

  static const char* value(const ::robots::FaireTacheMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots::FaireTacheMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_robot);
      stream.next(m.position);
      stream.next(m.duree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaireTacheMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots::FaireTacheMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots::FaireTacheMsg_<ContainerAllocator>& v)
  {
    s << indent << "num_robot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_robot);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "duree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duree);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MESSAGE_FAIRETACHEMSG_H
