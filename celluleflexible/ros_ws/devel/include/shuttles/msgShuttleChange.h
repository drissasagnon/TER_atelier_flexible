// Generated by gencpp from file shuttles/msgShuttleChange.msg
// DO NOT EDIT!


#ifndef SHUTTLES_MESSAGE_MSGSHUTTLECHANGE_H
#define SHUTTLES_MESSAGE_MSGSHUTTLECHANGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shuttles
{
template <class ContainerAllocator>
struct msgShuttleChange_
{
  typedef msgShuttleChange_<ContainerAllocator> Type;

  msgShuttleChange_()
    : handle(0)
    , argument(0)  {
    }
  msgShuttleChange_(const ContainerAllocator& _alloc)
    : handle(0)
    , argument(0)  {
  (void)_alloc;
    }



   typedef int32_t _handle_type;
  _handle_type handle;

   typedef int32_t _argument_type;
  _argument_type argument;





  typedef boost::shared_ptr< ::shuttles::msgShuttleChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shuttles::msgShuttleChange_<ContainerAllocator> const> ConstPtr;

}; // struct msgShuttleChange_

typedef ::shuttles::msgShuttleChange_<std::allocator<void> > msgShuttleChange;

typedef boost::shared_ptr< ::shuttles::msgShuttleChange > msgShuttleChangePtr;
typedef boost::shared_ptr< ::shuttles::msgShuttleChange const> msgShuttleChangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shuttles::msgShuttleChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shuttles::msgShuttleChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::shuttles::msgShuttleChange_<ContainerAllocator1> & lhs, const ::shuttles::msgShuttleChange_<ContainerAllocator2> & rhs)
{
  return lhs.handle == rhs.handle &&
    lhs.argument == rhs.argument;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::shuttles::msgShuttleChange_<ContainerAllocator1> & lhs, const ::shuttles::msgShuttleChange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace shuttles

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::shuttles::msgShuttleChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shuttles::msgShuttleChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shuttles::msgShuttleChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shuttles::msgShuttleChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shuttles::msgShuttleChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shuttles::msgShuttleChange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shuttles::msgShuttleChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02c8ec5acb6ca55401e7f0fabb5b8e17";
  }

  static const char* value(const ::shuttles::msgShuttleChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02c8ec5acb6ca554ULL;
  static const uint64_t static_value2 = 0x01e7f0fabb5b8e17ULL;
};

template<class ContainerAllocator>
struct DataType< ::shuttles::msgShuttleChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shuttles/msgShuttleChange";
  }

  static const char* value(const ::shuttles::msgShuttleChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shuttles::msgShuttleChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# argument = destination or product\n"
"\n"
"int32 handle\n"
"int32 argument \n"
;
  }

  static const char* value(const ::shuttles::msgShuttleChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shuttles::msgShuttleChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handle);
      stream.next(m.argument);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgShuttleChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shuttles::msgShuttleChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shuttles::msgShuttleChange_<ContainerAllocator>& v)
  {
    s << indent << "handle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handle);
    s << indent << "argument: ";
    Printer<int32_t>::stream(s, indent + "  ", v.argument);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHUTTLES_MESSAGE_MSGSHUTTLECHANGE_H
