// Generated by gencpp from file shuttles/msgShuttleCreate.msg
// DO NOT EDIT!


#ifndef SHUTTLES_MESSAGE_MSGSHUTTLECREATE_H
#define SHUTTLES_MESSAGE_MSGSHUTTLECREATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shuttles
{
template <class ContainerAllocator>
struct msgShuttleCreate_
{
  typedef msgShuttleCreate_<ContainerAllocator> Type;

  msgShuttleCreate_()
    : name()
    , destination(0)
    , product(0)
    , handle(0)
    , handlePlatform(0)
    , zone(0)  {
    }
  msgShuttleCreate_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , destination(0)
    , product(0)
    , handle(0)
    , handlePlatform(0)
    , zone(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _destination_type;
  _destination_type destination;

   typedef int32_t _product_type;
  _product_type product;

   typedef int32_t _handle_type;
  _handle_type handle;

   typedef int32_t _handlePlatform_type;
  _handlePlatform_type handlePlatform;

   typedef int32_t _zone_type;
  _zone_type zone;





  typedef boost::shared_ptr< ::shuttles::msgShuttleCreate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shuttles::msgShuttleCreate_<ContainerAllocator> const> ConstPtr;

}; // struct msgShuttleCreate_

typedef ::shuttles::msgShuttleCreate_<std::allocator<void> > msgShuttleCreate;

typedef boost::shared_ptr< ::shuttles::msgShuttleCreate > msgShuttleCreatePtr;
typedef boost::shared_ptr< ::shuttles::msgShuttleCreate const> msgShuttleCreateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shuttles::msgShuttleCreate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shuttles::msgShuttleCreate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::shuttles::msgShuttleCreate_<ContainerAllocator1> & lhs, const ::shuttles::msgShuttleCreate_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.destination == rhs.destination &&
    lhs.product == rhs.product &&
    lhs.handle == rhs.handle &&
    lhs.handlePlatform == rhs.handlePlatform &&
    lhs.zone == rhs.zone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::shuttles::msgShuttleCreate_<ContainerAllocator1> & lhs, const ::shuttles::msgShuttleCreate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace shuttles

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shuttles::msgShuttleCreate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shuttles::msgShuttleCreate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shuttles::msgShuttleCreate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbe2beba2a1f997c0e8c09a3d7eb1f7a";
  }

  static const char* value(const ::shuttles::msgShuttleCreate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbe2beba2a1f997cULL;
  static const uint64_t static_value2 = 0x0e8c09a3d7eb1f7aULL;
};

template<class ContainerAllocator>
struct DataType< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shuttles/msgShuttleCreate";
  }

  static const char* value(const ::shuttles::msgShuttleCreate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 destination\n"
"int32 product\n"
"int32 handle\n"
"int32 handlePlatform\n"
"int32 zone\n"
;
  }

  static const char* value(const ::shuttles::msgShuttleCreate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.destination);
      stream.next(m.product);
      stream.next(m.handle);
      stream.next(m.handlePlatform);
      stream.next(m.zone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgShuttleCreate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shuttles::msgShuttleCreate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shuttles::msgShuttleCreate_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "destination: ";
    Printer<int32_t>::stream(s, indent + "  ", v.destination);
    s << indent << "product: ";
    Printer<int32_t>::stream(s, indent + "  ", v.product);
    s << indent << "handle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handle);
    s << indent << "handlePlatform: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handlePlatform);
    s << indent << "zone: ";
    Printer<int32_t>::stream(s, indent + "  ", v.zone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHUTTLES_MESSAGE_MSGSHUTTLECREATE_H
