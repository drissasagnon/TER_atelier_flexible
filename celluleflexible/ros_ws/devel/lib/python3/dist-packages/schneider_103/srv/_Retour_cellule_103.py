# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from schneider_103/Retour_cellule_103Request.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Retour_cellule_103Request(genpy.Message):
  _md5sum = "d38585a9ace9d44e8aeed18cb0d33881"
  _type = "schneider_103/Retour_cellule_103Request"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 memoire
"""
  __slots__ = ['memoire']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       memoire

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Retour_cellule_103Request, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.memoire is None:
        self.memoire = 0
    else:
      self.memoire = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.memoire
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.memoire,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.memoire
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.memoire,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from schneider_103/Retour_cellule_103Response.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Retour_cellule_103Response(genpy.Message):
  _md5sum = "1d53ccdf0331758f5eea11c34a6186be"
  _type = "schneider_103/Retour_cellule_103Response"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
bool ST6
bool ST7
bool ST18
bool ST19
bool R3D
bool R4D
bool R9D
bool R10D
bool R3G
bool R4G
bool R9G
bool R10G
bool D3
bool D4
bool D9
bool D10
bool V3
bool V4
bool V9
bool V10
bool PS7
bool PS18
bool PS19
bool D3D
bool D4D
bool D9D
bool D10D
bool D3G
bool D4G
bool D9G
bool D10G
bool CP3
bool CP8

"""
  __slots__ = ['ST6','ST7','ST18','ST19','R3D','R4D','R9D','R10D','R3G','R4G','R9G','R10G','D3','D4','D9','D10','V3','V4','V9','V10','PS7','PS18','PS19','D3D','D4D','D9D','D10D','D3G','D4G','D9G','D10G','CP3','CP8']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ST6,ST7,ST18,ST19,R3D,R4D,R9D,R10D,R3G,R4G,R9G,R10G,D3,D4,D9,D10,V3,V4,V9,V10,PS7,PS18,PS19,D3D,D4D,D9D,D10D,D3G,D4G,D9G,D10G,CP3,CP8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Retour_cellule_103Response, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ST6 is None:
        self.ST6 = False
      if self.ST7 is None:
        self.ST7 = False
      if self.ST18 is None:
        self.ST18 = False
      if self.ST19 is None:
        self.ST19 = False
      if self.R3D is None:
        self.R3D = False
      if self.R4D is None:
        self.R4D = False
      if self.R9D is None:
        self.R9D = False
      if self.R10D is None:
        self.R10D = False
      if self.R3G is None:
        self.R3G = False
      if self.R4G is None:
        self.R4G = False
      if self.R9G is None:
        self.R9G = False
      if self.R10G is None:
        self.R10G = False
      if self.D3 is None:
        self.D3 = False
      if self.D4 is None:
        self.D4 = False
      if self.D9 is None:
        self.D9 = False
      if self.D10 is None:
        self.D10 = False
      if self.V3 is None:
        self.V3 = False
      if self.V4 is None:
        self.V4 = False
      if self.V9 is None:
        self.V9 = False
      if self.V10 is None:
        self.V10 = False
      if self.PS7 is None:
        self.PS7 = False
      if self.PS18 is None:
        self.PS18 = False
      if self.PS19 is None:
        self.PS19 = False
      if self.D3D is None:
        self.D3D = False
      if self.D4D is None:
        self.D4D = False
      if self.D9D is None:
        self.D9D = False
      if self.D10D is None:
        self.D10D = False
      if self.D3G is None:
        self.D3G = False
      if self.D4G is None:
        self.D4G = False
      if self.D9G is None:
        self.D9G = False
      if self.D10G is None:
        self.D10G = False
      if self.CP3 is None:
        self.CP3 = False
      if self.CP8 is None:
        self.CP8 = False
    else:
      self.ST6 = False
      self.ST7 = False
      self.ST18 = False
      self.ST19 = False
      self.R3D = False
      self.R4D = False
      self.R9D = False
      self.R10D = False
      self.R3G = False
      self.R4G = False
      self.R9G = False
      self.R10G = False
      self.D3 = False
      self.D4 = False
      self.D9 = False
      self.D10 = False
      self.V3 = False
      self.V4 = False
      self.V9 = False
      self.V10 = False
      self.PS7 = False
      self.PS18 = False
      self.PS19 = False
      self.D3D = False
      self.D4D = False
      self.D9D = False
      self.D10D = False
      self.D3G = False
      self.D4G = False
      self.D9G = False
      self.D10G = False
      self.CP3 = False
      self.CP8 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_33B().pack(_x.ST6, _x.ST7, _x.ST18, _x.ST19, _x.R3D, _x.R4D, _x.R9D, _x.R10D, _x.R3G, _x.R4G, _x.R9G, _x.R10G, _x.D3, _x.D4, _x.D9, _x.D10, _x.V3, _x.V4, _x.V9, _x.V10, _x.PS7, _x.PS18, _x.PS19, _x.D3D, _x.D4D, _x.D9D, _x.D10D, _x.D3G, _x.D4G, _x.D9G, _x.D10G, _x.CP3, _x.CP8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.ST6, _x.ST7, _x.ST18, _x.ST19, _x.R3D, _x.R4D, _x.R9D, _x.R10D, _x.R3G, _x.R4G, _x.R9G, _x.R10G, _x.D3, _x.D4, _x.D9, _x.D10, _x.V3, _x.V4, _x.V9, _x.V10, _x.PS7, _x.PS18, _x.PS19, _x.D3D, _x.D4D, _x.D9D, _x.D10D, _x.D3G, _x.D4G, _x.D9G, _x.D10G, _x.CP3, _x.CP8,) = _get_struct_33B().unpack(str[start:end])
      self.ST6 = bool(self.ST6)
      self.ST7 = bool(self.ST7)
      self.ST18 = bool(self.ST18)
      self.ST19 = bool(self.ST19)
      self.R3D = bool(self.R3D)
      self.R4D = bool(self.R4D)
      self.R9D = bool(self.R9D)
      self.R10D = bool(self.R10D)
      self.R3G = bool(self.R3G)
      self.R4G = bool(self.R4G)
      self.R9G = bool(self.R9G)
      self.R10G = bool(self.R10G)
      self.D3 = bool(self.D3)
      self.D4 = bool(self.D4)
      self.D9 = bool(self.D9)
      self.D10 = bool(self.D10)
      self.V3 = bool(self.V3)
      self.V4 = bool(self.V4)
      self.V9 = bool(self.V9)
      self.V10 = bool(self.V10)
      self.PS7 = bool(self.PS7)
      self.PS18 = bool(self.PS18)
      self.PS19 = bool(self.PS19)
      self.D3D = bool(self.D3D)
      self.D4D = bool(self.D4D)
      self.D9D = bool(self.D9D)
      self.D10D = bool(self.D10D)
      self.D3G = bool(self.D3G)
      self.D4G = bool(self.D4G)
      self.D9G = bool(self.D9G)
      self.D10G = bool(self.D10G)
      self.CP3 = bool(self.CP3)
      self.CP8 = bool(self.CP8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_33B().pack(_x.ST6, _x.ST7, _x.ST18, _x.ST19, _x.R3D, _x.R4D, _x.R9D, _x.R10D, _x.R3G, _x.R4G, _x.R9G, _x.R10G, _x.D3, _x.D4, _x.D9, _x.D10, _x.V3, _x.V4, _x.V9, _x.V10, _x.PS7, _x.PS18, _x.PS19, _x.D3D, _x.D4D, _x.D9D, _x.D10D, _x.D3G, _x.D4G, _x.D9G, _x.D10G, _x.CP3, _x.CP8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.ST6, _x.ST7, _x.ST18, _x.ST19, _x.R3D, _x.R4D, _x.R9D, _x.R10D, _x.R3G, _x.R4G, _x.R9G, _x.R10G, _x.D3, _x.D4, _x.D9, _x.D10, _x.V3, _x.V4, _x.V9, _x.V10, _x.PS7, _x.PS18, _x.PS19, _x.D3D, _x.D4D, _x.D9D, _x.D10D, _x.D3G, _x.D4G, _x.D9G, _x.D10G, _x.CP3, _x.CP8,) = _get_struct_33B().unpack(str[start:end])
      self.ST6 = bool(self.ST6)
      self.ST7 = bool(self.ST7)
      self.ST18 = bool(self.ST18)
      self.ST19 = bool(self.ST19)
      self.R3D = bool(self.R3D)
      self.R4D = bool(self.R4D)
      self.R9D = bool(self.R9D)
      self.R10D = bool(self.R10D)
      self.R3G = bool(self.R3G)
      self.R4G = bool(self.R4G)
      self.R9G = bool(self.R9G)
      self.R10G = bool(self.R10G)
      self.D3 = bool(self.D3)
      self.D4 = bool(self.D4)
      self.D9 = bool(self.D9)
      self.D10 = bool(self.D10)
      self.V3 = bool(self.V3)
      self.V4 = bool(self.V4)
      self.V9 = bool(self.V9)
      self.V10 = bool(self.V10)
      self.PS7 = bool(self.PS7)
      self.PS18 = bool(self.PS18)
      self.PS19 = bool(self.PS19)
      self.D3D = bool(self.D3D)
      self.D4D = bool(self.D4D)
      self.D9D = bool(self.D9D)
      self.D10D = bool(self.D10D)
      self.D3G = bool(self.D3G)
      self.D4G = bool(self.D4G)
      self.D9G = bool(self.D9G)
      self.D10G = bool(self.D10G)
      self.CP3 = bool(self.CP3)
      self.CP8 = bool(self.CP8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_33B = None
def _get_struct_33B():
    global _struct_33B
    if _struct_33B is None:
        _struct_33B = struct.Struct("<33B")
    return _struct_33B
class Retour_cellule_103(object):
  _type          = 'schneider_103/Retour_cellule_103'
  _md5sum = '144215a6005e994c4be2aa0a861077f5'
  _request_class  = Retour_cellule_103Request
  _response_class = Retour_cellule_103Response
